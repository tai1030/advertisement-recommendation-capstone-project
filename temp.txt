        // Image URL(s) for single file
        var imageUrls = [];

        // For "html", scan HTML code to get all image URLs
        switch (requestBody.files[i].type) {
            case 'image':
                imageUrls.push(requestBody.files[i].url);
                break;
            case 'html':
                imageUrls = imageUrls.concat(getImageUrlsFromHtmlCode(requestBody.files[i].content));
                break;
        }

        // Download file from URL, and upload to S3 bucket
        for (var j in imageUrls){
            var uploadResult = await uploadFileFromUrl(imageUrls[j], aid + '/' + fid);

            if (uploadResult === false) {
                console.error('Failed to download [' + imageUrls[j] + '], or not supported file format.');
                continue;
            }
    
            if (uploadResult.statusCode !== 200) {
                console.error('Failed to upload [' + imageUrls[j] + '] to S3. (Code: ' + uploadResult.statusCode + ')');
                continue;
            }

            if (typeof uploadResult.key === 'undefined' || uploadResult.key === null || uploadResult.key === '') {
                console.error('Failed to upload [' + imageUrls[j] + '] to S3. (No key response)');
                continue;
            }
        }

async function uploadFileFromUrl(sourceUrl, targetPath) {
    // Download file from URL (and get file MIME)
    const [fileMime, response] = await Promise.all([
        fileType.fromStream(got.stream(sourceUrl)),
        request({
            uri: sourceUrl,
            encoding: null
        })
    ]);

    // Failed to download file, or file format not supported
    if (fileMime === null || response === null) {
        return false;
    }

    // Upload downloaded file to S3 bucket
    const uploadResult = await s3
        .upload({
            Bucket: bucketName,
            Key: targetPath + '.' + fileMime.ext,
            Body: response,
            ContentType: fileMime.mime,
            ACL: 'public-read'
        })
        .promise();

    return uploadResult;
}

function getImageUrlsFromHtmlCode(html) {
    // TODO
    return [];
}